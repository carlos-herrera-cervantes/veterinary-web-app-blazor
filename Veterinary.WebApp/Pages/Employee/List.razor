@page "/employees"
@attribute [Authorize]
@inject IEmployeeService employeeService

<Header></Header>
<div class="row">
    <Nav></Nav>
    <div>
        <h2 class="text-center">Employees</h2>
        <div class="box-2 small-width">
            @if (employees is null)
            {
                <p><em>Loading....</em></p>
            }
            else
            {
                <table class="fl-table">
                    <thead>
                        <tr>
                            <th>First Name</th>
                            <th>Last Name</th>
                            <th>Gender</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (employees.Data.Count() == 0)
                        {
                            <tr>
                                <td colspan="3">No data</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var employee in employees.Data)
                            {
                                <tr>
                                    <td>@employee.Name</td>
                                    <td>@employee.LastName</td>
                                    <td>@employee.Gender</td>
                                    <td>
                                        <NavLink href="@($"/employees/{employee.Id}")"><i class="fa fa-info-circle"></i> Detail
                                        </NavLink>
                                    </td>
                                    <td><button class="form-button-danger" @onclick="@(() => HandleDeleteAsync(employee.Id))"><i
                                    class="fa fa-minus-circle"></i> Delete</button></td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@code {
    private ListEmployeeResponseDto employees;

    protected override async Task OnInitializedAsync()
    {
        employees = await employeeService.GetAllAsync();
        await base.OnInitializedAsync();
    }

    private async Task HandleDeleteAsync(string id)
    {
        await employeeService.DeleteByIdAsync(id);
        employees = await employeeService.GetAllAsync();
    }
}